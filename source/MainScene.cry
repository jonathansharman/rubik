import Audio;
import Graphics2D;
import Graphics2DText;
import Math;
import Random;
import TwoCansAlpha4;

const X_RES = $var["screen_width"];
const Y_RES = $var["screen_height"];

const MID_X = 0.5 * X_RES;
const MID_Y = 0.5 * Y_RES;
const RADIUS = 0.4 * Y_RES;

const LEFT_X = MID_X - 0.86602540378 * RADIUS;
const RIGHT_X = MID_X + 0.86602540378 * RADIUS;

const TOP_Y = MID_Y - RADIUS;
const MID_TOP_Y = MID_Y - 0.5 * RADIUS;
const MID_BOTTOM_Y = MID_Y + 0.5 * RADIUS;
const BOTTOM_Y = MID_Y + RADIUS;

const SHADOW = 0.15;

const SHUFFLE_COUNT = 20;

const TOP_FACE = 0;
const FRONT_LEFT_FACE = 1;
const FRONT_RIGHT_FACE = 2;
const BOTTOM_FACE = 3;
const BACK_RIGHT_FACE = 4;
const BACK_LEFT_FACE = 5;

// By convention, all side faces (including back faces) proceed top to bottom, then left to right (looking at the face
// head-on). The top face proceeds top-left to bottom-right, then bottom-left to top-right (looking at it from the player's
// point of view). The bottom face mirrors the top face: top-left to bottom-right, then bottom-left to top-right (still
// from the player's perspective).

const TOP_LEFT_ARROW_X = 0.32 * X_RES;
const TOP_RIGHT_ARROW_X = X_RES - TOP_LEFT_ARROW_X;
const TOP_ARROWS_Y = 0.13 * Y_RES;

const LEFT_ARROW_X = 0.15 * X_RES;
const RIGHT_ARROW_X = X_RES - LEFT_ARROW_X;
const SIDE_ARROWS_Y = 0.5 * Y_RES;

const BOTTOM_LEFT_ARROW_X = TOP_LEFT_ARROW_X;
const BOTTOM_RIGHT_ARROW_X = X_RES - TOP_LEFT_ARROW_X;
const BOTTOM_ARROWS_Y = Y_RES - TOP_ARROWS_Y;

class Button {
	field image;
	field x;
	field y;

	constructor(image, x, y, origin) {
		this.image = image;
		this.x = x - origin[0] * image.width;
		this.y = y - origin[1] * image.height;
	}

	function isClicked(inputManager) {
		return inputManager.didMouseClickHere(this.x, this.y, this.image.width, this.image.height);
	}

	function draw() {
		this.image.draw(this.x, this.y);
	}
}

function det(v1, v2) {
	return v1[0] * v2[1] - v2[0] * v1[1];
}

// Adapted from https://stackoverflow.com/a/1218538/3217185.
function parallelogramContainsPoint(p, q, r, a) {
	pr = [r[0] - p[0], r[1] - p[1]];
	pq = [q[0] - p[0], q[1] - p[1]];
	pa = [a[0] - p[0], a[1] - p[1]];
	dqr = det(pq, pr);
	qTest = -det(pa, pq) / dqr;
	rTest = det(pa, pr) / dqr;
	return 0.0 <= qTest && qTest <= 1.0 && 0.0 <= rTest && rTest <= 1.0;
}

function faceName(faceIdx) {
	switch (faceIdx) {
		case TOP_FACE:
			return "Top";
		case FRONT_LEFT_FACE:
			return "Front-left";
		case FRONT_RIGHT_FACE:
			return "Front-right";
		case BOTTOM_FACE:
			return "Bottom";
		case BACK_RIGHT_FACE:
			return "Back-right";
		case BACK_LEFT_FACE:
			return "Back-left";
	}
}

function colorName(colorIdx) {
	switch (colorIdx) {
		case 0:
			return "g";
		case 1:
			return "r";
		case 2:
			return "b";
		case 3:
			return "o";
		case 4:
			return "w";
		default:
			return "y";
	}
}

class MainScene : AbstractScene {
	static field colors =
		[ [255, 255, 255]
		, [0, 155, 72]
		, [185, 0, 0]
		, [255, 213, 0]
		, [0, 69, 173]
		, [255, 89, 0]
		];

	static field oTop = [LEFT_X, MID_TOP_Y];
	static field uTop = [MID_X, TOP_Y];
	static field vTop = [MID_X, MID_Y];

	static field oLeft = [LEFT_X, MID_TOP_Y];
	static field uLeft = [MID_X, MID_Y];
	static field vLeft = [LEFT_X, MID_BOTTOM_Y];

	static field oRight = [MID_X, MID_Y];
	static field uRight = [RIGHT_X, MID_TOP_Y];
	static field vRight = [MID_X, BOTTOM_Y];

	field faces;

	field topLeftArrow = new Button(Images.get("top-left-arrow.png"), TOP_LEFT_ARROW_X, TOP_ARROWS_Y, [0.5, 0.5]);
	field topRightArrow = new Button(Images.get("top-right-arrow.png"), TOP_RIGHT_ARROW_X, TOP_ARROWS_Y, [0.5, 0.5]);
	field leftArrow = new Button(Images.get("left-arrow.png"), LEFT_ARROW_X, SIDE_ARROWS_Y, [0.5, 0.5]);
	field rightArrow = new Button(Images.get("right-arrow.png"), RIGHT_ARROW_X, SIDE_ARROWS_Y, [0.5, 0.5]);
	field bottomLeftArrow = new Button(Images.get("bottom-left-arrow.png"), BOTTOM_LEFT_ARROW_X, BOTTOM_ARROWS_Y, [0.5, 0.5]);
	field bottomRightArrow = new Button(Images.get("bottom-right-arrow.png"), BOTTOM_RIGHT_ARROW_X, BOTTOM_ARROWS_Y, [0.5, 0.5]);
	field shuffleButton = new Button(Images.get("shuffle.png"), 0, Y_RES, [0.0, 1.0]);
	field resetButton = new Button(Images.get("reset.png"), X_RES, Y_RES, [1.0, 1.0]);

	constructor() {
		this.reset();
		this.shuffle();
	}

	// Does a few simple checks and warns if the current configuration is detected to be impossible.
	function validate() {
		top = this.faces[TOP_FACE];
		frontLeft = this.faces[FRONT_LEFT_FACE];
		if (top[0][0] == frontLeft[0][0] || top[0][1] == frontLeft[1][0] || top[0][2] == frontLeft[2][0]) {
			print("WARNING: Invalid cube state");
		}
	}

	function reset() {
		this.faces = [];
		for (face = 0; face <= 6; ++face) {
			this.faces.add([]);
			for (i = 0; i < 3; ++i) {
				this.faces[face].add(3 * [face]);
			}
		}
	}

	function shuffle() {
		for (i = 0; i < SHUFFLE_COUNT; ++i) {
			switch (Random.randomInt(6)) {
				case 0:
					this.rotateTopLayerCW();
					break;
				case 1:
					this.rotateFrontLeftLayerCW();
					break;
				case 2:
					this.rotateFrontRightLayerCW();
					break;
				case 3:
					// Rotate bottom layer.
					this.rotateCubeTopRight();
					this.rotateFrontLeftLayerCW();
					break;
				case 4:
					// Rotate back-left layer.
					this.rotateCubeRight();
					this.rotateFrontLeftLayerCW();
					break;
				default:
					// Rotate back-right layer.
					this.rotateCubeLeft();
					this.rotateFrontRightLayerCW();
					break;
			}
			this.validate();
		}
	}

	function update(inputManager, events) {
		// Reset.
		if (this.resetButton.isClicked(inputManager) || inputManager.isKeyPressed(KeyboardKey.ESCAPE)) {
			this.reset();
			return;
		}
		// Shuffle.
		if (this.shuffleButton.isClicked(inputManager)) {
			this.shuffle();
		}
		// Rotate layers by mouse.
		clickedCube = false;
		if (inputManager.didMouseClickHere(0, 0, X_RES, Y_RES)) {
			mousePos = inputManager.getMousePosition();
			if (parallelogramContainsPoint(MainScene.oTop, MainScene.uTop, MainScene.vTop, mousePos)) {
				if (inputManager.isShiftPressed()) {
					this.rotateTopLayerCCW();
				} else {
					this.rotateTopLayerCW();
				}
				clickedCube = true;
			} else if (parallelogramContainsPoint(MainScene.oLeft, MainScene.uLeft, MainScene.vLeft, mousePos)) {
				if (inputManager.isShiftPressed()) {
					this.rotateFrontLeftLayerCCW();
				} else {
					this.rotateFrontLeftLayerCW();
				}
				clickedCube = true;
			} else if (parallelogramContainsPoint(MainScene.oRight, MainScene.uRight, MainScene.vRight, mousePos)) {
				if (inputManager.isShiftPressed()) {
					this.rotateFrontRightLayerCCW();
				} else {
					this.rotateFrontRightLayerCW();
				}
				clickedCube = true;
			}
		}
		// Rotate layers by keyboard.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.Q)) {
			this.rotateFrontLeftLayerCCW();
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.A)) {
			this.rotateFrontLeftLayerCW();
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.W)) {
			this.rotateTopLayerCW();
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.S)) {
			this.rotateTopLayerCCW();
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.E)) {
			this.rotateFrontRightLayerCW();
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.D)) {
			this.rotateFrontRightLayerCCW();
		}
		// Rotate the cube.
		// Because the buttons slightly overlap the cube, skip cube rotations if a cube click occurred.
		if (!clickedCube) {
			if (this.topLeftArrow.isClicked(inputManager) || inputManager.isKeyPressedThisFrame(KeyboardKey.U)) {
				this.rotateCubeTopLeft();
			}
			if (this.bottomRightArrow.isClicked(inputManager) || inputManager.isKeyPressedThisFrame(KeyboardKey.M)) {
				this.rotateCubeBottomRight();
			}
			if (this.topRightArrow.isClicked(inputManager) || inputManager.isKeyPressedThisFrame(KeyboardKey.I)) {
				this.rotateCubeTopRight();
			}
			if (this.bottomLeftArrow.isClicked(inputManager) || inputManager.isKeyPressedThisFrame(KeyboardKey.N)) {
				this.rotateCubeBottomLeft();
			}
			if (this.leftArrow.isClicked(inputManager) || inputManager.isKeyPressedThisFrame(KeyboardKey.J)) {
				this.rotateCubeLeft();
			}
			if (this.rightArrow.isClicked(inputManager) || inputManager.isKeyPressedThisFrame(KeyboardKey.K)) {
				this.rotateCubeRight();
			}
		}
		// Debug printing.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.SPACE)) {
			sum = 0;
			for (face : this.faces) {
				for (row : face) {
					for (col : row) {
						sum += col;
					}
				}
			}
			print("=============");
			print("Checksum: " + sum);
			for (faceIdx = 0; faceIdx < 6; ++faceIdx) {
				face = this.faces[faceIdx];
				print(faceName(faceIdx));
				for (j = 0; j < 3; ++j) {
					row = 4 * " ";
					for (i = 0; i < 3; ++i) {
						row += colorName(face[i][j]) + " ";
					}
					print(row);
				}
			}
		}
	}

	// Creates a deep copy of the face at the given index. Useful for avoiding aliasing issues.
	function copyFace(faceIdx) {
		result = [];
		face = this.faces[faceIdx];
		for (i = 0; i < 3; ++i) {
			result.add(face[i].clone());
		}
		return result;
	}

	// Rotates the squares on a face CW without affecting the adjacent squares on other faces.
	function rotateFaceCW(faceIdx) {
		face = this.faces[faceIdx];
		// Corners
		t = face[0][0];
		face[0][0] = face[0][2];
		face[0][2] = face[2][2];
		face[2][2] = face[2][0];
		face[2][0] = t;
		// Edges
		t = face[0][1];
		face[0][1] = face[1][2];
		face[1][2] = face[2][1];
		face[2][1] = face[1][0];
		face[1][0] = t;
	}

	// Rotates the squares on a face CCW without affecting the adjacent squares on other faces.
	function rotateFaceCCW(faceIdx) {
		for (i = 0; i < 3; ++i) {
			this.rotateFaceCW(faceIdx);
		}
	}

	// Flips the indices of the squares on a face.
	function transposeFace(faceIdx) {
		face = this.faces[faceIdx];
		for (i = 1; i < 3; ++i) {
			for (j = 0; j < i; ++j) {
				t = face[i][j];
				face[i][j] = face[j][i];
				face[j][i] = t;
			}
		}
	}

	function rotateTopLayerCW() {
		this.rotateFaceCW(TOP_FACE);
		// First corner
		t = this.faces[FRONT_LEFT_FACE][0][0];
		this.faces[FRONT_LEFT_FACE][0][0] = this.faces[FRONT_RIGHT_FACE][0][0];
		this.faces[FRONT_RIGHT_FACE][0][0] = this.faces[BACK_RIGHT_FACE][0][0];
		this.faces[BACK_RIGHT_FACE][0][0] = this.faces[BACK_LEFT_FACE][0][0];
		this.faces[BACK_LEFT_FACE][0][0] = t;
		// Edge
		t = this.faces[FRONT_LEFT_FACE][1][0];
		this.faces[FRONT_LEFT_FACE][1][0] = this.faces[FRONT_RIGHT_FACE][1][0];
		this.faces[FRONT_RIGHT_FACE][1][0] = this.faces[BACK_RIGHT_FACE][1][0];
		this.faces[BACK_RIGHT_FACE][1][0] = this.faces[BACK_LEFT_FACE][1][0];
		this.faces[BACK_LEFT_FACE][1][0] = t;
		// Second corner
		t = this.faces[FRONT_LEFT_FACE][2][0];
		this.faces[FRONT_LEFT_FACE][2][0] = this.faces[FRONT_RIGHT_FACE][2][0];
		this.faces[FRONT_RIGHT_FACE][2][0] = this.faces[BACK_RIGHT_FACE][2][0];
		this.faces[BACK_RIGHT_FACE][2][0] = this.faces[BACK_LEFT_FACE][2][0];
		this.faces[BACK_LEFT_FACE][2][0] = t;
	}

	function rotateTopLayerCCW() {
		for (i = 0; i < 3; ++i) {
			this.rotateTopLayerCW();
		}
	}

	function rotateFrontLeftLayerCW() {
		this.rotateFaceCW(FRONT_LEFT_FACE);
		// In this case, can swap entire rows at a time, reversing them if necessary.
		t = this.faces[TOP_FACE][0].clone();
		this.faces[TOP_FACE][0] = this.faces[BACK_LEFT_FACE][2].clone();
		this.faces[BACK_LEFT_FACE][2] = this.faces[BOTTOM_FACE][0].clone();
		this.faces[BOTTOM_FACE][0] = this.faces[FRONT_RIGHT_FACE][0].clone();
		this.faces[FRONT_RIGHT_FACE][0] = t;
		// The new front and bottom faces are in reverse order.
		this.faces[TOP_FACE][0].reverse();
		this.faces[BOTTOM_FACE][0].reverse();
	}

	function rotateFrontLeftLayerCCW() {
		for (i = 0; i < 3; ++i) {
			this.rotateFrontLeftLayerCW();
		}
	}

	function rotateFrontRightLayerCW() {
		this.rotateFaceCW(FRONT_RIGHT_FACE);
		// First corner
		t = this.faces[TOP_FACE][0][2];
		this.faces[TOP_FACE][0][2] = this.faces[FRONT_LEFT_FACE][2][2];
		this.faces[FRONT_LEFT_FACE][2][2] = this.faces[BOTTOM_FACE][2][2];
		this.faces[BOTTOM_FACE][2][2] = this.faces[BACK_RIGHT_FACE][0][0];
		this.faces[BACK_RIGHT_FACE][0][0] = t;
		// Edge
		t = this.faces[TOP_FACE][1][2];
		this.faces[TOP_FACE][1][2] = this.faces[FRONT_LEFT_FACE][2][1];
		this.faces[FRONT_LEFT_FACE][2][1] = this.faces[BOTTOM_FACE][1][2];
		this.faces[BOTTOM_FACE][1][2] = this.faces[BACK_RIGHT_FACE][0][1];
		this.faces[BACK_RIGHT_FACE][0][1] = t;
		// Second corner
		t = this.faces[TOP_FACE][2][2];
		this.faces[TOP_FACE][2][2] = this.faces[FRONT_LEFT_FACE][2][0];
		this.faces[FRONT_LEFT_FACE][2][0] = this.faces[BOTTOM_FACE][0][2];
		this.faces[BOTTOM_FACE][0][2] = this.faces[BACK_RIGHT_FACE][0][2];
		this.faces[BACK_RIGHT_FACE][0][2] = t;
	}

	function rotateFrontRightLayerCCW() {
		for (i = 0; i < 3; ++i) {
			this.rotateFrontRightLayerCW();
		}
	}

	// Like a front-right layer CW rotate but for the whole cube.
	function rotateCubeTopRight() {
		// Rotate the front-right and back faces appropriately.
		this.rotateFaceCW(FRONT_RIGHT_FACE);
		this.rotateFaceCCW(BACK_LEFT_FACE);
		// Swap faces clockwise.
		t = this.copyFace(TOP_FACE);
		this.faces[TOP_FACE] = this.copyFace(FRONT_LEFT_FACE);
		this.faces[FRONT_LEFT_FACE] = this.copyFace(BOTTOM_FACE);
		this.faces[BOTTOM_FACE] = this.copyFace(BACK_RIGHT_FACE);
		this.faces[BACK_RIGHT_FACE] = t;
		// Reorient faces to account to correct for implicit reorientations.
		// The new top and back-right faces have been effectively rotated CCW.
		this.rotateFaceCW(TOP_FACE);
		this.rotateFaceCW(BACK_RIGHT_FACE);
		// The new front-left face has been transposed.
		this.transposeFace(FRONT_LEFT_FACE);
		// The new bottom face has been rotated 180 degrees and transposed.
		for (i = 0; i < 2; ++i) {
			this.rotateFaceCW(BOTTOM_FACE);
		}
		this.transposeFace(BOTTOM_FACE);
	}

	// Like a back-left layer CW rotate but for the whole cube.
	function rotateCubeBottomLeft() {
		for (i = 0; i < 3; ++i) {
			this.rotateCubeTopRight();
		}
	}

	// Rotates the entire cube 90 degrees clockwise on the y-axis.
	function rotateCubeLeft() {
		this.rotateFaceCW(TOP_FACE);
		this.rotateFaceCW(BOTTOM_FACE);
		// Swap side faces clockwise. They're already in the correct orientation.
		t = this.copyFace(FRONT_LEFT_FACE);
		this.faces[FRONT_LEFT_FACE] = this.copyFace(FRONT_RIGHT_FACE);
		this.faces[FRONT_RIGHT_FACE] = this.copyFace(BACK_RIGHT_FACE);
		this.faces[BACK_RIGHT_FACE] = this.copyFace(BACK_LEFT_FACE);
		this.faces[BACK_LEFT_FACE] = t;
	}

	// Rotates the entire cube 90 degrees counterclockwise on the y-axis.
	function rotateCubeRight() {
		// Unlike two wrongs, three lefts make a right.
		for (i = 0; i < 3; ++i) {
			this.rotateCubeLeft();
		}
	}

	// Like a back-right layer CW rotate but for the whole cube.
	function rotateCubeTopLeft() {
		// Rotate the front-left and back-right faces appropriately.
		this.rotateFaceCCW(FRONT_LEFT_FACE);
		this.rotateFaceCW(BACK_RIGHT_FACE);
		// Swap faces clockwise.
		t = this.copyFace(TOP_FACE);
		this.faces[TOP_FACE] = this.copyFace(FRONT_RIGHT_FACE);
		this.faces[FRONT_RIGHT_FACE] = this.copyFace(BOTTOM_FACE);
		this.faces[BOTTOM_FACE] = this.copyFace(BACK_LEFT_FACE);
		this.faces[BACK_LEFT_FACE] = t;
		// Reorient faces to account to correct for implicit reorientations.
		// The new bottom face has had the order of its rows reversed.
		this.faces[BOTTOM_FACE].reverse();
		// The new back-left face has been rotated 180 degrees.
		for (i = 0; i < 2; ++i) {
			this.rotateFaceCW(BACK_LEFT_FACE);
		}
		// The new front-right face has had each of its rows reversed.
		for (row : this.faces[FRONT_RIGHT_FACE]) {
			row.reverse();
		}
	}

	// Like a front-left layer CCW rotate but for the whole cube.
	function rotateCubeBottomRight() {
		for (i = 0; i < 3; ++i) {
			this.rotateCubeTopLeft();
		}
	}

	function render() {
		Graphics2D.Draw.fill(255, 255, 255);
		// Buttons
		this.topLeftArrow.draw();
		this.topRightArrow.draw();
		this.leftArrow.draw();
		this.rightArrow.draw();
		this.bottomLeftArrow.draw();
		this.bottomRightArrow.draw();
		this.shuffleButton.draw();
		this.resetButton.draw();
		// Top
		this.drawFace(TOP_FACE, MainScene.oTop, MainScene.uTop, MainScene.vTop);
		this.drawGrid(MainScene.oTop, MainScene.uTop, MainScene.vTop);
		// Front left
		this.drawFace(FRONT_LEFT_FACE, MainScene.oLeft, MainScene.uLeft, MainScene.vLeft);
		this.drawGrid(MainScene.oLeft, MainScene.uLeft, MainScene.vLeft);
		// Front right
		this.drawFace(FRONT_RIGHT_FACE, MainScene.oRight, MainScene.uRight, MainScene.vRight);
		this.drawGrid(MainScene.oRight, MainScene.uRight, MainScene.vRight);
	}

	function drawCentered(image, x, y) {
		image.draw(x - 0.5 * image.width, y - 0.5 * image.height);
	}

	function drawFace(face, o, u, v) {
		u = [(u[0] - o[0]) / 3.0, (u[1] - o[1]) / 3.0];
		v = [(v[0] - o[0]) / 3.0, (v[1] - o[1]) / 3.0];
		for (i = 0; i < 3; ++i) {
			for (j = 0; j < 3; ++j) {
				color = MainScene.colors[this.faces[face][i][j]];
				shadow =  1.0 - face * SHADOW;
				Graphics2D.Draw.quad
					( o[0] + i * u[0] + j * v[0], o[1] + i * u[1] + j * v[1]
					, o[0] + (i + 1) * u[0] + j * v[0], o[1] + (i + 1) * u[1] + j * v[1]
					, o[0] + (i + 1) * u[0] + (j + 1) * v[0], o[1] + (i + 1) * u[1] + (j + 1) * v[1]
					, o[0] + i * u[0] + (j + 1) * v[0], o[1] + i * u[1] + (j + 1) * v[1]
					, color[0] * shadow, color[1] * shadow, color[2] * shadow
					);
			}
		}
	}

	function drawGrid(o, u, v) {
		u = [(u[0] - o[0]) / 3.0, (u[1] - o[1]) / 3.0];
		v = [(v[0] - o[0]) / 3.0, (v[1] - o[1]) / 3.0];
		for (i = 0; i < 4; ++i) {
			thickness = i % 3 == 0 ? 4 : 2;
			Graphics2D.Draw.line
				( o[0] + i * v[0], o[1] + i * v[1]
				, o[0] + i * v[0] + 3 * u[0], o[1] + i * v[1] + 3 * u[1]
				, thickness
				, 0, 0, 0
				);
			Graphics2D.Draw.line
				( o[0] + i * u[0], o[1] + i * u[1]
				, o[0] + i * u[0] + 3 * v[0], o[1] + i * u[1] + 3 * v[1]
				, thickness
				, 0, 0, 0
				);
		}
	}
}
